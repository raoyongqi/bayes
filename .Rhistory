Lower = round(quantile(x, 0.025), 2),
Upper = round(quantile(x, 0.975), 2)
)
})
# 转置并整理为数据框
coef_summary_df <- as.data.frame(t(coef_summary))
# 重命名列名
colnames(coef_summary_df) <- c("Estimate", "Lower", "Upper")
coef_summary_df$Est.error <- coef_summary_df$Estimate - coef_summary_df$Lower
coef_summary_df$`95%CI(Credible intervals)` <- paste(coef_summary_df$Lower, coef_summary_df$Upper, sep = "-")
rownames(coef_summary_df) <- sapply(rownames(coef_summary_df), function(x) gsub("_", " ", x))
# 移除不需要的列
coef_summary_df <- subset(coef_summary_df, select = -c(Lower, Upper))
# 添加 Predictor 和 Response 列
coef_summary_df$Predictor <- rownames(coef_summary_df)
coef_summary_df$Response <- "Plant Disease"
print(coef_summary_df)
# 重新排列列顺序
coef_summary_df <- coef_summary_df[, c("Response", "Predictor", "Estimate", "Est.error", "95%CI(Credible intervals)")]
print(coef_summary_df)
custom_colnames <- function(colnames) {
# 将下划线替换为空格
# 将 95%CI 部分替换为两行
colnames <- gsub("95%CI\\(Credible intervals\\)", "95\\% CI\\par(Credible intervals)", colnames)
return(colnames)
}
install.packages("openxlsx")  # 如果尚未安装
library(openxlsx)
write.xlsx(coef_summary_df, "coef_summary.xlsx", rowNames = FALSE)
write.xlsx(coef_summary_df, "coef_summary.xlsx", rowNames = FALSE)
print(coef_summary_df)
coef_summary_df$`95%CI(Credible intervals)` <- paste(coef_summary_df$Lower, coef_summary_df$Upper, sep = "-")
# 转置并整理为数据框
coef_summary_df <- as.data.frame(t(coef_summary))
library("bayesplot")
library("rstanarm")
library("ggplot2")
library("xtable")
setwd("C:/Users/r/Desktop/bayes")
file_path <- "data/selection.csv"  # 替换为你的文件路径
selection <- read.csv(file_path)
# 对自变量进行标准化，保持因变量不变
selection_scaled <- selection
selection_scaled[ , -which(names(selection) == "RATIO")] <- scale(selection[ , -which(names(selection) == "RATIO")])
# 使用标准化后的数据进行拟合
fit <- stan_glm(RATIO ~ ., data = selection_scaled)
posterior <- as.matrix(fit)
params <- colnames(posterior)
# 要排除的参数
exclude_params <- c("LAT", "MAX_MAT", "MIN_MAT", "AVG_MAT", "(Intercept)", "sigma")
# 过滤掉要排除的参数
params_to_plot <- setdiff(params, exclude_params)
# 绘制后验分布
library(ggplot2)
library(bayesplot)
library(ggplot2)
library(bayesplot)
# Assuming posterior and params_to_plot are already defined
plot_title <- ggtitle("Posterior Distributions of Regression Coefficients",
"with medians and 80% intervals")
posterior
# Create the plot
plot <- mcmc_areas_data(posterior,
pars = params_to_plot,
prob = 0.8)
library(ggridges)
ggplot(plot, aes(x = x, y = parameter, height = scaled_density, fill = ifelse(x >= 0, "Positive", "Negative"))) +
geom_density_ridges(stat = "identity") +
theme_ridges() + # 设置主题
scale_fill_manual(values = c("Positive" = "darkred", "Negative" = "coral")) + # 设置颜色
labs(title = "Density Distribution by Parameter", x = "Density") + # 去掉 y 轴标签
theme(legend.position = "none", axis.title.y = element_blank()) # 去掉 y 轴标
# Save the plot as a high-resolution PNG image
ggsave("high_res_plot.png", plot = plot, dpi = 300, width = 10, height = 8)
params_to_keep <- setdiff(all_params, exclude_params)
# 仅保留需要的参数
posterior_filtered <- posterior[, params_to_keep]
# 计算回归系数统计量
coef_summary <- apply(posterior_filtered, 2, function(x) {
c(
Estimate = round(median(x), 2),
Lower = round(quantile(x, 0.025), 2),
Upper = round(quantile(x, 0.975), 2)
)
})
library(ggridges)
ggplot(plot, aes(x = x, y = parameter, height = scaled_density, fill = ifelse(x >= 0, "Positive", "Negative"))) +
geom_density_ridges(stat = "identity") +
theme_ridges() + # 设置主题
scale_fill_manual(values = c("Positive" = "darkred", "Negative" = "coral")) + # 设置颜色
labs(title = "Density Distribution by Parameter", x = "Density") + # 去掉 y 轴标签
theme(legend.position = "none", axis.title.y = element_blank()) # 去掉 y 轴标
# Save the plot as a high-resolution PNG image
ggsave("high_res_plot.png", plot = plot, dpi = 300, width = 10, height = 8)
all_params <- colnames(posterior)
params_to_keep <- setdiff(all_params, exclude_params)
# 仅保留需要的参数
posterior_filtered <- posterior[, params_to_keep]
# 计算回归系数统计量
coef_summary <- apply(posterior_filtered, 2, function(x) {
c(
Estimate = round(median(x), 2),
Lower = round(quantile(x, 0.025), 2),
Upper = round(quantile(x, 0.975), 2)
)
})
# 转置并整理为数据框
coef_summary_df <- as.data.frame(t(coef_summary))
# 重命名列名
colnames(coef_summary_df) <- c("Estimate", "Lower", "Upper")
coef_summary_df$Est.error <- coef_summary_df$Estimate - coef_summary_df$Lower
coef_summary_df$`95%CI(Credible intervals)` <- paste(coef_summary_df$Lower, coef_summary_df$Upper, sep = "-")
rownames(coef_summary_df) <- sapply(rownames(coef_summary_df), function(x) gsub("_", " ", x))
# 移除不需要的列
coef_summary_df <- subset(coef_summary_df, select = -c(Lower, Upper))
# 添加 Predictor 和 Response 列
coef_summary_df$Predictor <- rownames(coef_summary_df)
coef_summary_df$Response <- "Plant Disease"
print(coef_summary_df)
# 重新排列列顺序
coef_summary_df <- coef_summary_df[, c("Response", "Predictor", "Estimate", "Est.error", "95%CI(Credible intervals)")]
library(openxlsx)
write.xlsx(coef_summary_df, "coef_summary.xlsx", rowNames = FALSE)
print(coef_summary_df)
coef_summary_df
# 重新排列列顺序
coef_summary_df <- coef_summary_df[, c("Response", "Predictor", "Estimate", "95%CI(Credible intervals)")]
coef_summary_df
library(openxlsx)
write.xlsx(coef_summary_df, "coef_summary.xlsx", rowNames = FALSE)
write.xlsx(coef_summary_df, "coef_summary.xlsx", rowNames = FALSE)
# 加载所需的库
library(DALEX)
library(randomForest)
# 加载必要的库
library(vegan)
library(linkET)
library(corrr)
library(ggplot2)
library(dplyr)
# 读取数据
file_path <- "C:/Users/r/Desktop/bayes/data/selection.csv"  # 替换为你的文件路径
df <- read.csv(file_path)
getwd()
# 删除 'RATIO' 列
df$Pathogen.Load <- df$RATIO
df <- df[, !names(df) %in% c("RATIO")]
df <- df %>%
select(Pathogen.Load, everything())
# 创建一个模型
model <- randomForest(Pathogen.Load ~ ., data = df)
# 创建一个 DALEX 解释器
explainer <- DALEX::explain(model, data = df[,-1], y = df$Pathogen.Load)
# 选择一个观察对象进行局部解释
explanation <- DALEX::predict_parts(explainer, new_observation = df[1,-1])
explanation
# 可视化局部解释，类似于 LIME 图
p <- plot(explanation) +
theme(
text = element_text(size = 16),        # 设置字体大小为16
axis.title = element_text(size = 18),  # 设置坐标轴标题字体大小
axis.text = element_text(size = 14),   # 设置坐标轴刻度标签字体大小
plot.title = element_text(size = 20)   # 设置图表标题字体大小
)
# 保存图像
ggsave("lime.png", plot = last_plot(), dpi = 300, width = 12, height = 8)
# 加载所需的库
library(DALEX)
library(randomForest)
# 加载必要的库
library(vegan)
library(linkET)
library(corrr)
library(ggplot2)
library(dplyr)
# 读取数据
file_path <- "C:/Users/r/Desktop/bayes/data/selection.csv"  # 替换为你的文件路径
df <- read.csv(file_path)
getwd()
# 删除 'RATIO' 列
df$Pathogen.Load <- df$RATIO
df <- df[, !names(df) %in% c("RATIO")]
df <- df %>%
select(Pathogen.Load, everything())
# 创建一个模型
model <- randomForest(Pathogen.Load ~ ., data = df)
# 创建一个 DALEX 解释器
explainer <- DALEX::explain(model, data = df[,-1], y = df$Pathogen.Load)
library(randomForest)
install.packages("randomForest")
# 加载所需的库
library(DALEX)
library(randomForest)
# 加载必要的库
library(vegan)
library(linkET)
library(corrr)
library(ggplot2)
library(dplyr)
library(randomForest)
# 读取数据
file_path <- "C:/Users/r/Desktop/bayes/data/selection.csv"  # 替换为你的文件路径
df <- read.csv(file_path)
getwd()
# 删除 'RATIO' 列
df$Pathogen.Load <- df$RATIO
df <- df[, !names(df) %in% c("RATIO")]
df <- df %>%
select(Pathogen.Load, everything())
# 创建一个模型
model <- randomForest(Pathogen.Load ~ ., data = df)
# 创建一个 DALEX 解释器
explainer <- DALEX::explain(model, data = df[,-1], y = df$Pathogen.Load)
# 选择一个观察对象进行局部解释
explanation <- DALEX::predict_parts(explainer, new_observation = df[1,-1])
explanation
# 可视化局部解释，类似于 LIME 图
p <- plot(explanation) +
theme(
text = element_text(size = 16),        # 设置字体大小为16
axis.title = element_text(size = 18),  # 设置坐标轴标题字体大小
axis.text = element_text(size = 14),   # 设置坐标轴刻度标签字体大小
plot.title = element_text(size = 20)   # 设置图表标题字体大小
)
# 保存图像
ggsave("lime.png", plot = p, dpi = 300, width = 12, height = 8)
library(vegan)
library(linkET)
library(corrr)
library(ggplot2)
library(unix)
getwd()
# 读取数据
file_path = "data/selection.csv"  # 替换为你的文件路径
data <- read.csv(file_path)
library(dplyr)
# 假设你的数据框是 data
data <- data %>%
rename(`Pathogen Load` = RATIO)
# 获取所有列名
other_columns <- setdiff(names(data), "Pathogen Load")
ncol(data)
colnames(data)
# 使用其他列名从数据框中选取这些列
xxxx <- data[, other_columns]
# 提取因变量
yyyy <- data$`Pathogen Load`
#> 载入程辑包：'dplyr'
#> The following objects are masked from 'package:stats':
#>
#>     filter, lag
#> The following objects are masked from 'package:base':
#>
#>     intersect, setdiff, setequal, union
# 定义测量项
column_names <- c("SRAD", "HAND", "LON", "S_SAND", "WIND", "PSEA", "VAPR", "ELEV",
"MIN_MAT", "TSEA", "LAT", "AVG_MAT", "MAP", "T_SAND", "MAX_MAT", "S_REF_BULK")
# 定义 Climate, Soil, Geo 列表
Climate <- c("SRAD", "PSEA", "WIND", "VAPR", "MAX_MAT", "TSEA","AVG_MAT", "MIN_MAT", "MAP")
Soil <- c("S_SAND",  "T_SAND", "S_REF_BULK")
Geo <- c("LAT", "LON", "ELEV","HAND")
# 假设 df 是你原来的数据框
ncol(xxxx)
# 根据列列表重新排序
xxxx <- xxxx %>%
select(all_of(c(Climate, Soil, Geo)))
ncol(xxxx)
# 使用 mantel_test 进行 Mantel 检验
mantel <- mantel_test(xxxx, yyyy,
spec_select = list(`Pathogen Load` = 1:16)
)%>%
mutate(rd = cut(r, breaks = c(-Inf, 0.2, 0.4, Inf),
labels = c("< 0.2", "0.2 - 0.4", ">= 0.4")),
pd = cut(p, breaks = c(-Inf, 0.01, 0.05, Inf),
labels = c("< 0.01", "0.01 - 0.05", ">= 0.05")))
library(vegan)
library(linkET)
library(corrr)
library(ggplot2)
library(unix)
getwd()
# 读取数据
file_path = "data/selection.csv"  # 替换为你的文件路径
data <- read.csv(file_path)
library(dplyr)
# 假设你的数据框是 data
data <- data %>%
rename(`Pathogen Load` = RATIO)
# 获取所有列名
other_columns <- setdiff(names(data), "Pathogen Load")
ncol(data)
colnames(data)
# 使用其他列名从数据框中选取这些列
xxxx <- data[, other_columns]
# 提取因变量
yyyy <- data$`Pathogen Load`
#> 载入程辑包：'dplyr'
#> The following objects are masked from 'package:stats':
#>
#>     filter, lag
#> The following objects are masked from 'package:base':
#>
#>     intersect, setdiff, setequal, union
# 定义测量项
column_names <- c("SRAD", "HAND", "LON", "S_SAND", "WIND", "PSEA", "VAPR", "ELEV",
"MIN_MAT", "TSEA", "LAT", "AVG_MAT", "MAP", "T_SAND", "MAX_MAT", "S_REF_BULK")
# 定义 Climate, Soil, Geo 列表
Climate <- c("SRAD", "PSEA", "WIND", "VAPR", "MAX_MAT", "TSEA","AVG_MAT", "MIN_MAT", "MAP")
Soil <- c("S_SAND",  "T_SAND", "S_REF_BULK")
Geo <- c("LAT", "LON", "ELEV","HAND")
# 假设 df 是你原来的数据框
ncol(xxxx)
# 根据列列表重新排序
xxxx <- xxxx %>%
select(all_of(c(Climate, Soil, Geo)))
ncol(xxxx)
# 使用 mantel_test 进行 Mantel 检验
mantel <- mantel_test(xxxx, yyyy,
spec_select = list(`Pathogen Load` = 1:1)
)%>%
mutate(rd = cut(r, breaks = c(-Inf, 0.2, 0.4, Inf),
labels = c("< 0.2", "0.2 - 0.4", ">= 0.4")),
pd = cut(p, breaks = c(-Inf, 0.01, 0.05, Inf),
labels = c("< 0.01", "0.01 - 0.05", ">= 0.05")))
# devtools::install_github("krlmlr/ulimit")
#> `mantel_test()` using 'bray' dist method for 'spec'.
#> `mantel_test()` using 'euclidean' dist method for 'env'.
output_file <- "C:/Users/r/Desktop/mantel_results.xlsx"
library(openxlsx)
# 使用 openxlsx 将数据框写入 Excel
write.xlsx(mantel, output_file)
library(openxlsx)
# 使用 openxlsx 将数据框写入 Excel
write.xlsx(mantel, output_file)
correlate(xxxx)
memory.limit(size = 16000)  # 16GB（根据你的电脑内存大小调整）
qcorrplot(correlate(xxxx), type = "lower", diag = FALSE) +
geom_square() +
geom_couple(aes(colour = pd, size = rd),
data = mantel,
curvature = nice_curvature()) +
scale_fill_gradientn(colours = RColorBrewer::brewer.pal(11, "RdBu")) +
scale_size_manual(values = c(0.5, 1, 2)) +
scale_colour_manual(values = color_pal(3)) +
guides(size = guide_legend(title = "Mantel's r",
override.aes = list(colour = "grey35"),
order = 2),
colour = guide_legend(title = "Mantel's p",
override.aes = list(size = 3),
order = 1),
fill = guide_colorbar(title = "Pearson's r", order = 3))
library(vegan)
library(linkET)
library(corrr)
library(ggplot2)
library(unix)
# 读取数据
file_path = "data/selection.csv"  # 替换为你的文件路径
data <- read.csv(file_path)
library(dplyr)
# 假设你的数据框是 data
data <- data %>%
rename(`Pathogen Load` = RATIO)
# 获取所有列名
other_columns <- setdiff(names(data), "Pathogen Load")
# 使用其他列名从数据框中选取这些列
xxxx <- data[, other_columns]
# 提取因变量
yyyy <- data$`Pathogen Load`
# 定义 Climate, Soil, Geo 列表
Climate <- c("SRAD", "PSEA", "WIND", "VAPR", "MAX_MAT", "TSEA", "MIN_MAT", "MAP")
Soil <- c("S_SAND", "S_CLAY", "T_SAND", "T_BULK_DEN", "T_REF_BULK")
# 定义 Climate, Soil, Geo 列表
Climate <- c("SRAD", "PSEA", "WIND", "VAPR", "MAX_MAT", "TSEA","AVG_MAT", "MIN_MAT", "MAP")
Soil <- c("S_SAND",  "T_SAND", "S_REF_BULK")
Geo <- c("LAT", "LON", "ELEV","HAND")
# 根据列列表重新排序
xxxx <- xxxx %>%
select(all_of(c(Climate, Soil, Geo)))
# yyyy <- df_sorted  # 假设这个数据框是自变量
# xxxx <- df$`Pathogen Load`  # 假设这个是因变量
yyyy <- data.frame(`Pathogen Load`  = yyyy)
# 使用 mantel_test 进行 Mantel 检验
mantel <- mantel_test(yyyy, xxxx,
spec_select = list(`Pathogen Load` = 1:1)
)%>%
mutate(rd = cut(r, breaks = c(-Inf, 0.2, 0.4, Inf),
labels = c("< 0.2", "0.2 - 0.4", ">= 0.4")),
pd = cut(p, breaks = c(-Inf, 0.01, 0.05, Inf),
labels = c("< 0.01", "0.01 - 0.05", ">= 0.05")))
qcorrplot(correlate(xxxx), type = "lower", diag = FALSE) +
geom_square() +
geom_couple(aes(colour = pd, size = rd),
data = mantel,
curvature = nice_curvature()) +
scale_fill_gradientn(colours = RColorBrewer::brewer.pal(11, "RdBu")) +
scale_size_manual(values = c(0.5, 1, 2)) +
scale_colour_manual(values = color_pal(3)) +
guides(size = guide_legend(title = "Mantel's r",
override.aes = list(colour = "grey35"),
order = 2),
colour = guide_legend(title = "Mantel's p",
override.aes = list(size = 3),
order = 1),
fill = guide_colorbar(title = "Pearson's r", order = 3))
xxxx
library(dplyr)
#>
#> 载入程辑包：'dplyr'
#> The following objects are masked from 'package:stats':
#>
#>     filter, lag
#> The following objects are masked from 'package:base':
#>
#>     intersect, setdiff, setequal, union
data("varechem", package = "vegan")
data("varespec", package = "vegan")
mantel <- mantel_test(varespec, varechem,
spec_select = list(Spec01 = 1:7,
Spec02 = 8:18,
Spec03 = 19:37,
Spec04 = 38:44)) %>%
mutate(rd = cut(r, breaks = c(-Inf, 0.2, 0.4, Inf),
labels = c("< 0.2", "0.2 - 0.4", ">= 0.4")),
pd = cut(p, breaks = c(-Inf, 0.01, 0.05, Inf),
labels = c("< 0.01", "0.01 - 0.05", ">= 0.05")))
qcorrplot(correlate(varechem), type = "lower", diag = FALSE) +
geom_square() +
geom_couple(aes(colour = pd, size = rd),
data = mantel,
curvature = nice_curvature()) +
scale_fill_gradientn(colours = RColorBrewer::brewer.pal(11, "RdBu")) +
scale_size_manual(values = c(0.5, 1, 2)) +
scale_colour_manual(values = color_pal(3)) +
guides(size = guide_legend(title = "Mantel's r",
override.aes = list(colour = "grey35"),
order = 2),
colour = guide_legend(title = "Mantel's p",
override.aes = list(size = 3),
order = 1),
fill = guide_colorbar(title = "Pearson's r", order = 3))
library(dplyr)
#>
#> 载入程辑包：'dplyr'
#> The following objects are masked from 'package:stats':
#>
#>     filter, lag
#> The following objects are masked from 'package:base':
#>
#>     intersect, setdiff, setequal, union
data("varechem", package = "vegan")
data("varespec", package = "vegan")
mantel <- mantel_test(varespec, varechem,
spec_select = list(Spec01 = 1:7,
Spec02 = 8:18,
Spec03 = 19:37,
Spec04 = 38:44)) %>%
mutate(rd = cut(r, breaks = c(-Inf, 0.2, 0.4, Inf),
labels = c("< 0.2", "0.2 - 0.4", ">= 0.4")),
pd = cut(p, breaks = c(-Inf, 0.01, 0.05, Inf),
labels = c("< 0.01", "0.01 - 0.05", ">= 0.05")))
qcorrplot(correlate(varechem), type = "lower", diag = FALSE) +
geom_square() +
geom_couple(aes(colour = pd, size = rd),
data = mantel,
curvature = nice_curvature()) +
scale_fill_gradientn(colours = RColorBrewer::brewer.pal(11, "RdBu")) +
scale_size_manual(values = c(0.5, 1, 2)) +
scale_colour_manual(values = color_pal(3)) +
guides(size = guide_legend(title = "Mantel's r",
override.aes = list(colour = "grey35"),
order = 2),
colour = guide_legend(title = "Mantel's p",
override.aes = list(size = 3),
order = 1),
fill = guide_colorbar(title = "Pearson's r", order = 3))
gc()
library(dplyr)
#>
#> 载入程辑包：'dplyr'
#> The following objects are masked from 'package:stats':
#>
#>     filter, lag
#> The following objects are masked from 'package:base':
#>
#>     intersect, setdiff, setequal, union
data("varechem", package = "vegan")
data("varespec", package = "vegan")
mantel <- mantel_test(varespec, varechem,
spec_select = list(Spec01 = 1:7,
Spec02 = 8:18,
Spec03 = 19:37,
Spec04 = 38:44)) %>%
mutate(rd = cut(r, breaks = c(-Inf, 0.2, 0.4, Inf),
labels = c("< 0.2", "0.2 - 0.4", ">= 0.4")),
pd = cut(p, breaks = c(-Inf, 0.01, 0.05, Inf),
labels = c("< 0.01", "0.01 - 0.05", ">= 0.05")))
qcorrplot(correlate(varechem), type = "lower", diag = FALSE) +
geom_square() +
geom_couple(aes(colour = pd, size = rd),
data = mantel,
curvature = nice_curvature()) +
scale_fill_gradientn(colours = RColorBrewer::brewer.pal(11, "RdBu")) +
scale_size_manual(values = c(0.5, 1, 2)) +
scale_colour_manual(values = color_pal(3)) +
guides(size = guide_legend(title = "Mantel's r",
override.aes = list(colour = "grey35"),
order = 2),
colour = guide_legend(title = "Mantel's p",
override.aes = list(size = 3),
order = 1),
fill = guide_colorbar(title = "Pearson's r", order = 3))
